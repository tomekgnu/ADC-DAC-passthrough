
ADC-DAC-passthrough.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001654  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080017ec  080017ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017fc  080017fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001804  08001804  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001804  08001804  00011804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001808  08001808  00011808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800180c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000014  08001820  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001820  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007429  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000148f  00000000  00000000  0002746d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003179  00000000  00000000  000288fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  0002ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000590  00000000  00000000  0002bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000147be  00000000  00000000  0002c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007ae8  00000000  00000000  00040d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080f6a  00000000  00000000  0004880e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c9778  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000dac  00000000  00000000  000c97cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080017d4 	.word	0x080017d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080017d4 	.word	0x080017d4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b500      	push	{lr}
 80004d2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d4:	2230      	movs	r2, #48	; 0x30
 80004d6:	2100      	movs	r1, #0
 80004d8:	a808      	add	r0, sp, #32
 80004da:	f001 f973 	bl	80017c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	2300      	movs	r3, #0
 80004e0:	9303      	str	r3, [sp, #12]
 80004e2:	9304      	str	r3, [sp, #16]
 80004e4:	9305      	str	r3, [sp, #20]
 80004e6:	9306      	str	r3, [sp, #24]
 80004e8:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <SystemClock_Config+0x88>)
 80004ee:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80004f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80004f4:	6411      	str	r1, [r2, #64]	; 0x40
 80004f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80004f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004fc:	9201      	str	r2, [sp, #4]
 80004fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <SystemClock_Config+0x8c>)
 8000504:	6811      	ldr	r1, [r2, #0]
 8000506:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800050a:	6011      	str	r1, [r2, #0]
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000512:	9202      	str	r2, [sp, #8]
 8000514:	9a02      	ldr	r2, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000516:	2202      	movs	r2, #2
 8000518:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	2201      	movs	r2, #1
 800051c:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	2210      	movs	r2, #16
 8000520:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000522:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000524:	a808      	add	r0, sp, #32
 8000526:	f000 fb47 	bl	8000bb8 <HAL_RCC_OscConfig>
 800052a:	b980      	cbnz	r0, 800054e <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	230f      	movs	r3, #15
 800052e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000530:	2100      	movs	r1, #0
 8000532:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	9107      	str	r1, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000540:	a803      	add	r0, sp, #12
 8000542:	f000 fd87 	bl	8001054 <HAL_RCC_ClockConfig>
 8000546:	b920      	cbnz	r0, 8000552 <SystemClock_Config+0x82>
  {
    Error_Handler();
  }
}
 8000548:	b015      	add	sp, #84	; 0x54
 800054a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <SystemClock_Config+0x80>
 8000552:	b672      	cpsid	i
 8000554:	e7fe      	b.n	8000554 <SystemClock_Config+0x84>
 8000556:	bf00      	nop
 8000558:	40023800 	.word	0x40023800
 800055c:	40007000 	.word	0x40007000

08000560 <main>:
{
 8000560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000564:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000566:	f000 f9b1 	bl	80008cc <HAL_Init>
  SystemClock_Config();
 800056a:	f7ff ffb1 	bl	80004d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	2400      	movs	r4, #0
 8000570:	9405      	str	r4, [sp, #20]
 8000572:	9406      	str	r4, [sp, #24]
 8000574:	9407      	str	r4, [sp, #28]
 8000576:	9408      	str	r4, [sp, #32]
 8000578:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	9403      	str	r4, [sp, #12]
 800057c:	4b6d      	ldr	r3, [pc, #436]	; (8000734 <main+0x1d4>)
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	f042 0201 	orr.w	r2, r2, #1
 8000584:	631a      	str	r2, [r3, #48]	; 0x30
 8000586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000588:	f002 0201 	and.w	r2, r2, #1
 800058c:	9203      	str	r2, [sp, #12]
 800058e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000590:	9404      	str	r4, [sp, #16]
 8000592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000594:	f042 0202 	orr.w	r2, r2, #2
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	9304      	str	r3, [sp, #16]
 80005a2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, DACLD_Pin|DACCS_Pin, GPIO_PIN_SET);
 80005a4:	4e64      	ldr	r6, [pc, #400]	; (8000738 <main+0x1d8>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80005ac:	4630      	mov	r0, r6
 80005ae:	f000 fafd 	bl	8000bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADCCS_GPIO_Port, ADCCS_Pin, GPIO_PIN_SET);
 80005b2:	4f62      	ldr	r7, [pc, #392]	; (800073c <main+0x1dc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	4638      	mov	r0, r7
 80005bc:	f000 faf6 	bl	8000bac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DACLD_Pin;
 80005c0:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80005c4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2501      	movs	r5, #1
 80005ca:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DACLD_GPIO_Port, &GPIO_InitStruct);
 80005d0:	a905      	add	r1, sp, #20
 80005d2:	4630      	mov	r0, r6
 80005d4:	f000 fa00 	bl	80009d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ADCCS_Pin;
 80005d8:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80005e0:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(ADCCS_GPIO_Port, &GPIO_InitStruct);
 80005e2:	a905      	add	r1, sp, #20
 80005e4:	4638      	mov	r0, r7
 80005e6:	f000 f9f7 	bl	80009d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ADCBUSY_Pin;
 80005ea:	2708      	movs	r7, #8
 80005ec:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ee:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ADCBUSY_GPIO_Port, &GPIO_InitStruct);
 80005f2:	a905      	add	r1, sp, #20
 80005f4:	4630      	mov	r0, r6
 80005f6:	f000 f9ef 	bl	80009d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DACCS_Pin;
 80005fa:	2310      	movs	r3, #16
 80005fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000602:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(DACCS_GPIO_Port, &GPIO_InitStruct);
 8000604:	a905      	add	r1, sp, #20
 8000606:	4630      	mov	r0, r6
 8000608:	f000 f9e6 	bl	80009d8 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800060c:	484c      	ldr	r0, [pc, #304]	; (8000740 <main+0x1e0>)
 800060e:	4b4d      	ldr	r3, [pc, #308]	; (8000744 <main+0x1e4>)
 8000610:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000612:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000616:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000618:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800061a:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800061e:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000624:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000626:	61c7      	str	r7, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000628:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800062a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800062c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800062e:	230a      	movs	r3, #10
 8000630:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000632:	f000 fe61 	bl	80012f8 <HAL_SPI_Init>
 8000636:	2800      	cmp	r0, #0
 8000638:	d179      	bne.n	800072e <main+0x1ce>
  HAL_GPIO_WritePin(ADCCS_GPIO_Port, ADCCS_Pin, GPIO_PIN_SET);
 800063a:	4c40      	ldr	r4, [pc, #256]	; (800073c <main+0x1dc>)
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000642:	4620      	mov	r0, r4
 8000644:	f000 fab2 	bl	8000bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DACCS_GPIO_Port, DACCS_Pin, GPIO_PIN_SET);
 8000648:	4d3b      	ldr	r5, [pc, #236]	; (8000738 <main+0x1d8>)
 800064a:	2201      	movs	r2, #1
 800064c:	2110      	movs	r1, #16
 800064e:	4628      	mov	r0, r5
 8000650:	f000 faac 	bl	8000bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DACLD_GPIO_Port, DACLD_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065a:	4628      	mov	r0, r5
 800065c:	f000 faa6 	bl	8000bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADCCS_GPIO_Port, ADCCS_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000666:	4620      	mov	r0, r4
 8000668:	f000 faa0 	bl	8000bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADCCS_GPIO_Port, ADCCS_Pin, GPIO_PIN_RESET);
 800066c:	46a1      	mov	r9, r4
	HAL_SPI_TransmitReceive(&hspi1,request,response,3, 100);
 800066e:	4c36      	ldr	r4, [pc, #216]	; (8000748 <main+0x1e8>)
 8000670:	4f33      	ldr	r7, [pc, #204]	; (8000740 <main+0x1e0>)
 8000672:	2664      	movs	r6, #100	; 0x64
	HAL_GPIO_WritePin(ADCCS_GPIO_Port, ADCCS_Pin, GPIO_PIN_SET);
 8000674:	2501      	movs	r5, #1
	  HAL_GPIO_WritePin(DACCS_GPIO_Port, DACCS_Pin, GPIO_PIN_RESET);
 8000676:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8000738 <main+0x1d8>
	HAL_GPIO_WritePin(ADCCS_GPIO_Port, ADCCS_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000680:	4648      	mov	r0, r9
 8000682:	f000 fa93 	bl	8000bac <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,request,response,3, 100);
 8000686:	9600      	str	r6, [sp, #0]
 8000688:	2303      	movs	r3, #3
 800068a:	4622      	mov	r2, r4
 800068c:	492f      	ldr	r1, [pc, #188]	; (800074c <main+0x1ec>)
 800068e:	4638      	mov	r0, r7
 8000690:	f000 ff5e 	bl	8001550 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADCCS_GPIO_Port, ADCCS_Pin, GPIO_PIN_SET);
 8000694:	462a      	mov	r2, r5
 8000696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069a:	4648      	mov	r0, r9
 800069c:	f000 fa86 	bl	8000bac <HAL_GPIO_WritePin>
	response[0] <<= 1;
 80006a0:	7822      	ldrb	r2, [r4, #0]
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	7022      	strb	r2, [r4, #0]
	if(response[1] & 0x80)
 80006a8:	7863      	ldrb	r3, [r4, #1]
 80006aa:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80006ae:	2900      	cmp	r1, #0
		response[0] |= 0x01;
 80006b0:	bfbc      	itt	lt
 80006b2:	f042 0201 	orrlt.w	r2, r2, #1
 80006b6:	7022      	strblt	r2, [r4, #0]
	response[1] <<= 1;
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	7063      	strb	r3, [r4, #1]
	if(response[2] & 0x80)
 80006be:	f994 2002 	ldrsb.w	r2, [r4, #2]
 80006c2:	2a00      	cmp	r2, #0
		response[1] |= 0x01;
 80006c4:	bfbc      	itt	lt
 80006c6:	f043 0301 	orrlt.w	r3, r3, #1
 80006ca:	7063      	strblt	r3, [r4, #1]
	  result = (short)response[0] << 8;
 80006cc:	7823      	ldrb	r3, [r4, #0]
	  result += response[1];
 80006ce:	7862      	ldrb	r2, [r4, #1]
 80006d0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80006d4:	b293      	uxth	r3, r2
	  if((short)result < 0)
 80006d6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
		result &= 0x7FFF;
 80006da:	bf14      	ite	ne
 80006dc:	f3c3 030e 	ubfxne	r3, r3, #0, #15
		result |= 0x8000;
 80006e0:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 80006e4:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <main+0x1f0>)
 80006e6:	8013      	strh	r3, [r2, #0]
	  dac[0] = 0x10;
 80006e8:	f8df a068 	ldr.w	sl, [pc, #104]	; 8000754 <main+0x1f4>
 80006ec:	f04f 0b10 	mov.w	fp, #16
 80006f0:	f88a b000 	strb.w	fp, [sl]
	  dac[1] = result >> 8;
 80006f4:	0a1a      	lsrs	r2, r3, #8
 80006f6:	f88a 2001 	strb.w	r2, [sl, #1]
	  dac[2] = result & 0x00FF;
 80006fa:	f88a 3002 	strb.w	r3, [sl, #2]
	  HAL_GPIO_WritePin(DACCS_GPIO_Port, DACCS_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	4659      	mov	r1, fp
 8000702:	4640      	mov	r0, r8
 8000704:	f000 fa52 	bl	8000bac <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1,dac, 1, 100);
 8000708:	4633      	mov	r3, r6
 800070a:	462a      	mov	r2, r5
 800070c:	4651      	mov	r1, sl
 800070e:	4638      	mov	r0, r7
 8000710:	f000 fe51 	bl	80013b6 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1,dac + 1, 2, 100);
 8000714:	4633      	mov	r3, r6
 8000716:	2202      	movs	r2, #2
 8000718:	f10a 0101 	add.w	r1, sl, #1
 800071c:	4638      	mov	r0, r7
 800071e:	f000 fe4a 	bl	80013b6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(DACCS_GPIO_Port, DACCS_Pin, GPIO_PIN_SET);
 8000722:	462a      	mov	r2, r5
 8000724:	4659      	mov	r1, fp
 8000726:	4640      	mov	r0, r8
 8000728:	f000 fa40 	bl	8000bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADCCS_GPIO_Port, ADCCS_Pin, GPIO_PIN_RESET);
 800072c:	e7a5      	b.n	800067a <main+0x11a>
 800072e:	b672      	cpsid	i
  while (1)
 8000730:	e7fe      	b.n	8000730 <main+0x1d0>
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400
 800073c:	40020000 	.word	0x40020000
 8000740:	20000038 	.word	0x20000038
 8000744:	40013000 	.word	0x40013000
 8000748:	20000030 	.word	0x20000030
 800074c:	20000004 	.word	0x20000004
 8000750:	20000034 	.word	0x20000034
 8000754:	20000000 	.word	0x20000000

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2100      	movs	r1, #0
 800075c:	9100      	str	r1, [sp, #0]
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_MspInit+0x34>)
 8000760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000766:	645a      	str	r2, [r3, #68]	; 0x44
 8000768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800076a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800076e:	9200      	str	r2, [sp, #0]
 8000770:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	9101      	str	r1, [sp, #4]
 8000774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000776:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800077a:	641a      	str	r2, [r3, #64]	; 0x40
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	b002      	add	sp, #8
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000790:	b500      	push	{lr}
 8000792:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	2300      	movs	r3, #0
 8000796:	9303      	str	r3, [sp, #12]
 8000798:	9304      	str	r3, [sp, #16]
 800079a:	9305      	str	r3, [sp, #20]
 800079c:	9306      	str	r3, [sp, #24]
 800079e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80007a0:	6802      	ldr	r2, [r0, #0]
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_SPI_MspInit+0x68>)
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d002      	beq.n	80007ae <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007a8:	b009      	add	sp, #36	; 0x24
 80007aa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ae:	2200      	movs	r2, #0
 80007b0:	9201      	str	r2, [sp, #4]
 80007b2:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80007b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80007b8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80007bc:	6459      	str	r1, [r3, #68]	; 0x44
 80007be:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80007c0:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 80007c4:	9101      	str	r1, [sp, #4]
 80007c6:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	9202      	str	r2, [sp, #8]
 80007ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007cc:	f041 0101 	orr.w	r1, r1, #1
 80007d0:	6319      	str	r1, [r3, #48]	; 0x30
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007dc:	23e0      	movs	r3, #224	; 0xe0
 80007de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e8:	2305      	movs	r3, #5
 80007ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	a903      	add	r1, sp, #12
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <HAL_SPI_MspInit+0x6c>)
 80007f0:	f000 f8f2 	bl	80009d8 <HAL_GPIO_Init>
}
 80007f4:	e7d8      	b.n	80007a8 <HAL_SPI_MspInit+0x18>
 80007f6:	bf00      	nop
 80007f8:	40013000 	.word	0x40013000
 80007fc:	40020000 	.word	0x40020000

08000800 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler>

08000802 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler>

08000804 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <MemManage_Handler>

08000806 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler>

08000808 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler>

0800080a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	4770      	bx	lr

0800080c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	4770      	bx	lr

0800080e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000812:	f000 f875 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000816:	bd08      	pop	{r3, pc}

08000818 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <SystemInit+0x10>)
 800081a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800081e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000822:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000832:	490e      	ldr	r1, [pc, #56]	; (800086c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000848:	4c0b      	ldr	r4, [pc, #44]	; (8000878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000856:	f7ff ffdf 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085a:	f000 ff8f 	bl	800177c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085e:	f7ff fe7f 	bl	8000560 <main>
  bx  lr    
 8000862:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000870:	0800180c 	.word	0x0800180c
  ldr r2, =_sbss
 8000874:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000878:	20000094 	.word	0x20000094

0800087c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC_IRQHandler>
	...

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b510      	push	{r4, lr}
 8000882:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_InitTick+0x40>)
 8000886:	7818      	ldrb	r0, [r3, #0]
 8000888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000890:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <HAL_InitTick+0x44>)
 8000892:	6810      	ldr	r0, [r2, #0]
 8000894:	fbb0 f0f3 	udiv	r0, r0, r3
 8000898:	f000 f888 	bl	80009ac <HAL_SYSTICK_Config>
 800089c:	b968      	cbnz	r0, 80008ba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	2c0f      	cmp	r4, #15
 80008a0:	d901      	bls.n	80008a6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80008a2:	2001      	movs	r0, #1
 80008a4:	e00a      	b.n	80008bc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a6:	2200      	movs	r2, #0
 80008a8:	4621      	mov	r1, r4
 80008aa:	f04f 30ff 	mov.w	r0, #4294967295
 80008ae:	f000 f84b 	bl	8000948 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_InitTick+0x48>)
 80008b4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2000      	movs	r0, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80008ba:	2001      	movs	r0, #1
}
 80008bc:	bd10      	pop	{r4, pc}
 80008be:	bf00      	nop
 80008c0:	2000000c 	.word	0x2000000c
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000010 	.word	0x20000010

080008cc <HAL_Init>:
{
 80008cc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_Init+0x30>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008d6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008e6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f81b 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff ffc6 	bl	8000880 <HAL_InitTick>
  HAL_MspInit();
 80008f4:	f7ff ff30 	bl	8000758 <HAL_MspInit>
}
 80008f8:	2000      	movs	r0, #0
 80008fa:	bd08      	pop	{r3, pc}
 80008fc:	40023c00 	.word	0x40023c00

08000900 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000900:	4a03      	ldr	r2, [pc, #12]	; (8000910 <HAL_IncTick+0x10>)
 8000902:	6811      	ldr	r1, [r2, #0]
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_IncTick+0x14>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	440b      	add	r3, r1
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000090 	.word	0x20000090
 8000914:	2000000c 	.word	0x2000000c

08000918 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000918:	4b01      	ldr	r3, [pc, #4]	; (8000920 <HAL_GetTick+0x8>)
 800091a:	6818      	ldr	r0, [r3, #0]
}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000090 	.word	0x20000090

08000924 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000926:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	0203      	lsls	r3, r0, #8
 800092a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000932:	0412      	lsls	r2, r2, #16
 8000934:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000940:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000948:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_NVIC_SetPriority+0x5c>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000952:	f1c3 0407 	rsb	r4, r3, #7
 8000956:	2c04      	cmp	r4, #4
 8000958:	bf28      	it	cs
 800095a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095c:	1d1d      	adds	r5, r3, #4
 800095e:	2d06      	cmp	r5, #6
 8000960:	bf8c      	ite	hi
 8000962:	3b03      	subhi	r3, #3
 8000964:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000966:	f04f 35ff 	mov.w	r5, #4294967295
 800096a:	fa05 f404 	lsl.w	r4, r5, r4
 800096e:	ea21 0104 	bic.w	r1, r1, r4
 8000972:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	fa05 f303 	lsl.w	r3, r5, r3
 8000978:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800097e:	2800      	cmp	r0, #0
 8000980:	db09      	blt.n	8000996 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	0109      	lsls	r1, r1, #4
 8000984:	b2c9      	uxtb	r1, r1
 8000986:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800098a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800098e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000992:	bc30      	pop	{r4, r5}
 8000994:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	f000 000f 	and.w	r0, r0, #15
 800099a:	0109      	lsls	r1, r1, #4
 800099c:	b2c9      	uxtb	r1, r1
 800099e:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <HAL_NVIC_SetPriority+0x60>)
 80009a0:	5419      	strb	r1, [r3, r0]
 80009a2:	e7f6      	b.n	8000992 <HAL_NVIC_SetPriority+0x4a>
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	e000ed14 	.word	0xe000ed14

080009ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	3801      	subs	r0, #1
 80009ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009b2:	d20a      	bcs.n	80009ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_SYSTICK_Config+0x24>)
 80009b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_SYSTICK_Config+0x28>)
 80009ba:	21f0      	movs	r1, #240	; 0xf0
 80009bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	2000      	movs	r0, #0
 80009c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009dc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009de:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009e0:	2601      	movs	r6, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009e2:	2703      	movs	r7, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000ba0 <HAL_GPIO_Init+0x1c8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e8:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000ba4 <HAL_GPIO_Init+0x1cc>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ec:	4d6a      	ldr	r5, [pc, #424]	; (8000b98 <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ee:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000ba8 <HAL_GPIO_Init+0x1d0>
 80009f2:	e04b      	b.n	8000a8c <HAL_GPIO_Init+0xb4>
        temp = GPIOx->OSPEEDR; 
 80009f4:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009f6:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80009fa:	fa07 fa0b 	lsl.w	sl, r7, fp
 80009fe:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a02:	68ca      	ldr	r2, [r1, #12]
 8000a04:	fa02 f20b 	lsl.w	r2, r2, fp
 8000a08:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 8000a0c:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a0e:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a10:	ea22 0a04 	bic.w	sl, r2, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a14:	684a      	ldr	r2, [r1, #4]
 8000a16:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8000a1a:	409c      	lsls	r4, r3
 8000a1c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OTYPER = temp;
 8000a20:	6044      	str	r4, [r0, #4]
 8000a22:	e041      	b.n	8000aa8 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a24:	2400      	movs	r4, #0
 8000a26:	fa04 f40b 	lsl.w	r4, r4, fp
 8000a2a:	ea44 040a 	orr.w	r4, r4, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2e:	6094      	str	r4, [r2, #8]
        temp = EXTI->IMR;
 8000a30:	682c      	ldr	r4, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	ea6f 0a08 	mvn.w	sl, r8
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a36:	684a      	ldr	r2, [r1, #4]
 8000a38:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a3c:	bf0c      	ite	eq
 8000a3e:	ea04 040a 	andeq.w	r4, r4, sl
        {
          temp |= iocurrent;
 8000a42:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->IMR = temp;
 8000a46:	602c      	str	r4, [r5, #0]

        temp = EXTI->EMR;
 8000a48:	686c      	ldr	r4, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a4a:	684a      	ldr	r2, [r1, #4]
 8000a4c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a50:	bf0c      	ite	eq
 8000a52:	ea04 040a 	andeq.w	r4, r4, sl
        {
          temp |= iocurrent;
 8000a56:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->EMR = temp;
 8000a5a:	606c      	str	r4, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a5c:	68ac      	ldr	r4, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a5e:	684a      	ldr	r2, [r1, #4]
 8000a60:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a64:	bf0c      	ite	eq
 8000a66:	ea04 040a 	andeq.w	r4, r4, sl
        {
          temp |= iocurrent;
 8000a6a:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->RTSR = temp;
 8000a6e:	60ac      	str	r4, [r5, #8]

        temp = EXTI->FTSR;
 8000a70:	68ec      	ldr	r4, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a72:	684a      	ldr	r2, [r1, #4]
 8000a74:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000a78:	bf0c      	ite	eq
 8000a7a:	ea0a 0204 	andeq.w	r2, sl, r4
        {
          temp |= iocurrent;
 8000a7e:	ea48 0204 	orrne.w	r2, r8, r4
        }
        EXTI->FTSR = temp;
 8000a82:	60ea      	str	r2, [r5, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a84:	3301      	adds	r3, #1
 8000a86:	2b10      	cmp	r3, #16
 8000a88:	f000 8082 	beq.w	8000b90 <HAL_GPIO_Init+0x1b8>
    ioposition = 0x01U << position;
 8000a8c:	fa06 f403 	lsl.w	r4, r6, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a90:	680a      	ldr	r2, [r1, #0]
 8000a92:	ea04 0802 	and.w	r8, r4, r2
    if(iocurrent == ioposition)
 8000a96:	ea34 0202 	bics.w	r2, r4, r2
 8000a9a:	d1f3      	bne.n	8000a84 <HAL_GPIO_Init+0xac>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a9c:	684a      	ldr	r2, [r1, #4]
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	2a01      	cmp	r2, #1
 8000aa6:	d9a5      	bls.n	80009f4 <HAL_GPIO_Init+0x1c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa8:	684a      	ldr	r2, [r1, #4]
 8000aaa:	f002 0203 	and.w	r2, r2, #3
 8000aae:	2a03      	cmp	r2, #3
 8000ab0:	d024      	beq.n	8000afc <HAL_GPIO_Init+0x124>
        temp = GPIOx->PUPDR;
 8000ab2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8000ab8:	fa07 f20a 	lsl.w	r2, r7, sl
 8000abc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac0:	688a      	ldr	r2, [r1, #8]
 8000ac2:	fa02 f20a 	lsl.w	r2, r2, sl
 8000ac6:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000ac8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aca:	684a      	ldr	r2, [r1, #4]
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	2a02      	cmp	r2, #2
 8000ad2:	d113      	bne.n	8000afc <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3U];
 8000ad4:	08dc      	lsrs	r4, r3, #3
 8000ad6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8000ada:	f8d4 a020 	ldr.w	sl, [r4, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ade:	f003 0207 	and.w	r2, r3, #7
 8000ae2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	fa02 f20b 	lsl.w	r2, r2, fp
 8000aec:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000af0:	690a      	ldr	r2, [r1, #16]
 8000af2:	fa02 f20b 	lsl.w	r2, r2, fp
 8000af6:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000afa:	6222      	str	r2, [r4, #32]
      temp = GPIOx->MODER;
 8000afc:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000afe:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8000b02:	fa07 f40a 	lsl.w	r4, r7, sl
 8000b06:	ea22 0404 	bic.w	r4, r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b0a:	684a      	ldr	r2, [r1, #4]
 8000b0c:	f002 0203 	and.w	r2, r2, #3
 8000b10:	fa02 f20a 	lsl.w	r2, r2, sl
 8000b14:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000b16:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b18:	684a      	ldr	r2, [r1, #4]
 8000b1a:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000b1e:	d0b1      	beq.n	8000a84 <HAL_GPIO_Init+0xac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b20:	2200      	movs	r2, #0
 8000b22:	9201      	str	r2, [sp, #4]
 8000b24:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8000b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b2c:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
 8000b30:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8000b34:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b3c:	f023 0203 	bic.w	r2, r3, #3
 8000b40:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000b44:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8000b48:	f8d2 a008 	ldr.w	sl, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b4c:	f003 0403 	and.w	r4, r3, #3
 8000b50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8000b54:	240f      	movs	r4, #15
 8000b56:	fa04 f40b 	lsl.w	r4, r4, fp
 8000b5a:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b5e:	4570      	cmp	r0, lr
 8000b60:	f43f af60 	beq.w	8000a24 <HAL_GPIO_Init+0x4c>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d00d      	beq.n	8000b84 <HAL_GPIO_Init+0x1ac>
 8000b68:	4c0c      	ldr	r4, [pc, #48]	; (8000b9c <HAL_GPIO_Init+0x1c4>)
 8000b6a:	42a0      	cmp	r0, r4
 8000b6c:	d00c      	beq.n	8000b88 <HAL_GPIO_Init+0x1b0>
 8000b6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b72:	42a0      	cmp	r0, r4
 8000b74:	d00a      	beq.n	8000b8c <HAL_GPIO_Init+0x1b4>
 8000b76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b7a:	42a0      	cmp	r0, r4
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2404      	moveq	r4, #4
 8000b80:	2407      	movne	r4, #7
 8000b82:	e750      	b.n	8000a26 <HAL_GPIO_Init+0x4e>
 8000b84:	4634      	mov	r4, r6
 8000b86:	e74e      	b.n	8000a26 <HAL_GPIO_Init+0x4e>
 8000b88:	2402      	movs	r4, #2
 8000b8a:	e74c      	b.n	8000a26 <HAL_GPIO_Init+0x4e>
 8000b8c:	463c      	mov	r4, r7
 8000b8e:	e74a      	b.n	8000a26 <HAL_GPIO_Init+0x4e>
      }
    }
  }
}
 8000b90:	b003      	add	sp, #12
 8000b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b96:	bf00      	nop
 8000b98:	40013c00 	.word	0x40013c00
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020400 	.word	0x40020400

08000bac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bac:	b10a      	cbz	r2, 8000bb2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bae:	6181      	str	r1, [r0, #24]
 8000bb0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bb2:	0409      	lsls	r1, r1, #16
 8000bb4:	6181      	str	r1, [r0, #24]
  }
}
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	f000 81e2 	beq.w	8000f82 <HAL_RCC_OscConfig+0x3ca>
{
 8000bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc6:	6803      	ldr	r3, [r0, #0]
 8000bc8:	f013 0f01 	tst.w	r3, #1
 8000bcc:	d03b      	beq.n	8000c46 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bce:	4ba7      	ldr	r3, [pc, #668]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f003 030c 	and.w	r3, r3, #12
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	d02c      	beq.n	8000c34 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bda:	4ba4      	ldr	r3, [pc, #656]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d021      	beq.n	8000c2a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bec:	d04f      	beq.n	8000c8e <HAL_RCC_OscConfig+0xd6>
 8000bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf2:	d052      	beq.n	8000c9a <HAL_RCC_OscConfig+0xe2>
 8000bf4:	4b9d      	ldr	r3, [pc, #628]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c06:	6863      	ldr	r3, [r4, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d050      	beq.n	8000cae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fe84 	bl	8000918 <HAL_GetTick>
 8000c10:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c12:	4e96      	ldr	r6, [pc, #600]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000c14:	6833      	ldr	r3, [r6, #0]
 8000c16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c1a:	d114      	bne.n	8000c46 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c1c:	f7ff fe7c 	bl	8000918 <HAL_GetTick>
 8000c20:	1b40      	subs	r0, r0, r5
 8000c22:	2864      	cmp	r0, #100	; 0x64
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8000c26:	2003      	movs	r0, #3
 8000c28:	e1b2      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c2a:	4b90      	ldr	r3, [pc, #576]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000c32:	d0d8      	beq.n	8000be6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c34:	4b8d      	ldr	r3, [pc, #564]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c3c:	d003      	beq.n	8000c46 <HAL_RCC_OscConfig+0x8e>
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 81a0 	beq.w	8000f86 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	f013 0f02 	tst.w	r3, #2
 8000c4c:	d054      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c4e:	4b87      	ldr	r3, [pc, #540]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f013 0f0c 	tst.w	r3, #12
 8000c56:	d03e      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c58:	4b84      	ldr	r3, [pc, #528]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d033      	beq.n	8000ccc <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c64:	68e3      	ldr	r3, [r4, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d067      	beq.n	8000d3a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c6a:	4b81      	ldr	r3, [pc, #516]	; (8000e70 <HAL_RCC_OscConfig+0x2b8>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c70:	f7ff fe52 	bl	8000918 <HAL_GetTick>
 8000c74:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c76:	4e7d      	ldr	r6, [pc, #500]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000c78:	6833      	ldr	r3, [r6, #0]
 8000c7a:	f013 0f02 	tst.w	r3, #2
 8000c7e:	d153      	bne.n	8000d28 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c80:	f7ff fe4a 	bl	8000918 <HAL_GetTick>
 8000c84:	1b40      	subs	r0, r0, r5
 8000c86:	2802      	cmp	r0, #2
 8000c88:	d9f6      	bls.n	8000c78 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	e180      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8e:	4a77      	ldr	r2, [pc, #476]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e7b5      	b.n	8000c06 <HAL_RCC_OscConfig+0x4e>
 8000c9a:	4b74      	ldr	r3, [pc, #464]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e7ab      	b.n	8000c06 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8000cae:	f7ff fe33 	bl	8000918 <HAL_GetTick>
 8000cb2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb4:	4e6d      	ldr	r6, [pc, #436]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000cb6:	6833      	ldr	r3, [r6, #0]
 8000cb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cbc:	d0c3      	beq.n	8000c46 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cbe:	f7ff fe2b 	bl	8000918 <HAL_GetTick>
 8000cc2:	1b40      	subs	r0, r0, r5
 8000cc4:	2864      	cmp	r0, #100	; 0x64
 8000cc6:	d9f6      	bls.n	8000cb6 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8000cc8:	2003      	movs	r0, #3
 8000cca:	e161      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ccc:	4b67      	ldr	r3, [pc, #412]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000cd4:	d1c6      	bne.n	8000c64 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	4b65      	ldr	r3, [pc, #404]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f013 0f02 	tst.w	r3, #2
 8000cde:	d003      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x130>
 8000ce0:	68e3      	ldr	r3, [r4, #12]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	f040 8151 	bne.w	8000f8a <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce8:	4a60      	ldr	r2, [pc, #384]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	6921      	ldr	r1, [r4, #16]
 8000cee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cf2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cf6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	f013 0f08 	tst.w	r3, #8
 8000cfe:	d040      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d00:	6963      	ldr	r3, [r4, #20]
 8000d02:	b363      	cbz	r3, 8000d5e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d04:	4b5b      	ldr	r3, [pc, #364]	; (8000e74 <HAL_RCC_OscConfig+0x2bc>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d0a:	f7ff fe05 	bl	8000918 <HAL_GetTick>
 8000d0e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d10:	4e56      	ldr	r6, [pc, #344]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000d12:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000d14:	f013 0f02 	tst.w	r3, #2
 8000d18:	d133      	bne.n	8000d82 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fdfd 	bl	8000918 <HAL_GetTick>
 8000d1e:	1b40      	subs	r0, r0, r5
 8000d20:	2802      	cmp	r0, #2
 8000d22:	d9f6      	bls.n	8000d12 <HAL_RCC_OscConfig+0x15a>
        {
          return HAL_TIMEOUT;
 8000d24:	2003      	movs	r0, #3
 8000d26:	e133      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d28:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000d2a:	6813      	ldr	r3, [r2, #0]
 8000d2c:	6921      	ldr	r1, [r4, #16]
 8000d2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e7de      	b.n	8000cf8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <HAL_RCC_OscConfig+0x2b8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fdea 	bl	8000918 <HAL_GetTick>
 8000d44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d46:	4e49      	ldr	r6, [pc, #292]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000d48:	6833      	ldr	r3, [r6, #0]
 8000d4a:	f013 0f02 	tst.w	r3, #2
 8000d4e:	d0d3      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d50:	f7ff fde2 	bl	8000918 <HAL_GetTick>
 8000d54:	1b40      	subs	r0, r0, r5
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d9f6      	bls.n	8000d48 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	e118      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <HAL_RCC_OscConfig+0x2bc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d64:	f7ff fdd8 	bl	8000918 <HAL_GetTick>
 8000d68:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d6a:	4e40      	ldr	r6, [pc, #256]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000d6c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000d6e:	f013 0f02 	tst.w	r3, #2
 8000d72:	d006      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d74:	f7ff fdd0 	bl	8000918 <HAL_GetTick>
 8000d78:	1b40      	subs	r0, r0, r5
 8000d7a:	2802      	cmp	r0, #2
 8000d7c:	d9f6      	bls.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000d7e:	2003      	movs	r0, #3
 8000d80:	e106      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	f013 0f04 	tst.w	r3, #4
 8000d88:	d079      	beq.n	8000e7e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d92:	d10d      	bne.n	8000db0 <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000da0:	641a      	str	r2, [r3, #64]	; 0x40
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dac:	2501      	movs	r5, #1
 8000dae:	e000      	b.n	8000db2 <HAL_RCC_OscConfig+0x1fa>
    FlagStatus       pwrclkchanged = RESET;
 8000db0:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <HAL_RCC_OscConfig+0x2c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000dba:	d021      	beq.n	8000e00 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dbc:	68a3      	ldr	r3, [r4, #8]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d032      	beq.n	8000e28 <HAL_RCC_OscConfig+0x270>
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d036      	beq.n	8000e34 <HAL_RCC_OscConfig+0x27c>
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000dc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000dca:	f022 0201 	bic.w	r2, r2, #1
 8000dce:	671a      	str	r2, [r3, #112]	; 0x70
 8000dd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000dd2:	f022 0204 	bic.w	r2, r2, #4
 8000dd6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dd8:	68a3      	ldr	r3, [r4, #8]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d034      	beq.n	8000e48 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dde:	f7ff fd9b 	bl	8000918 <HAL_GetTick>
 8000de2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de4:	4f21      	ldr	r7, [pc, #132]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dec:	f013 0f02 	tst.w	r3, #2
 8000df0:	d144      	bne.n	8000e7c <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000df2:	f7ff fd91 	bl	8000918 <HAL_GetTick>
 8000df6:	1b80      	subs	r0, r0, r6
 8000df8:	4540      	cmp	r0, r8
 8000dfa:	d9f6      	bls.n	8000dea <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	e0c7      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_RCC_OscConfig+0x2c0>)
 8000e02:	6813      	ldr	r3, [r2, #0]
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fd85 	bl	8000918 <HAL_GetTick>
 8000e0e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e10:	4f19      	ldr	r7, [pc, #100]	; (8000e78 <HAL_RCC_OscConfig+0x2c0>)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e18:	d1d0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e1a:	f7ff fd7d 	bl	8000918 <HAL_GetTick>
 8000e1e:	1b80      	subs	r0, r0, r6
 8000e20:	2802      	cmp	r0, #2
 8000e22:	d9f6      	bls.n	8000e12 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000e24:	2003      	movs	r0, #3
 8000e26:	e0b3      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e28:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000e2a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6713      	str	r3, [r2, #112]	; 0x70
 8000e32:	e7d1      	b.n	8000dd8 <HAL_RCC_OscConfig+0x220>
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e38:	f042 0204 	orr.w	r2, r2, #4
 8000e3c:	671a      	str	r2, [r3, #112]	; 0x70
 8000e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e40:	f042 0201 	orr.w	r2, r2, #1
 8000e44:	671a      	str	r2, [r3, #112]	; 0x70
 8000e46:	e7c7      	b.n	8000dd8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fd66 	bl	8000918 <HAL_GetTick>
 8000e4c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4e:	4f07      	ldr	r7, [pc, #28]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e50:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e56:	f013 0f02 	tst.w	r3, #2
 8000e5a:	d00f      	beq.n	8000e7c <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fd5c 	bl	8000918 <HAL_GetTick>
 8000e60:	1b80      	subs	r0, r0, r6
 8000e62:	4540      	cmp	r0, r8
 8000e64:	d9f6      	bls.n	8000e54 <HAL_RCC_OscConfig+0x29c>
        {
          return HAL_TIMEOUT;
 8000e66:	2003      	movs	r0, #3
 8000e68:	e092      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	42470000 	.word	0x42470000
 8000e74:	42470e80 	.word	0x42470e80
 8000e78:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e7c:	b9ed      	cbnz	r5, 8000eba <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e7e:	69a3      	ldr	r3, [r4, #24]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 8084 	beq.w	8000f8e <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e86:	4a49      	ldr	r2, [pc, #292]	; (8000fac <HAL_RCC_OscConfig+0x3f4>)
 8000e88:	6892      	ldr	r2, [r2, #8]
 8000e8a:	f002 020c 	and.w	r2, r2, #12
 8000e8e:	2a08      	cmp	r2, #8
 8000e90:	d051      	beq.n	8000f36 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d017      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e96:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_RCC_OscConfig+0x3f8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fd3c 	bl	8000918 <HAL_GetTick>
 8000ea0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea2:	4d42      	ldr	r5, [pc, #264]	; (8000fac <HAL_RCC_OscConfig+0x3f4>)
 8000ea4:	682b      	ldr	r3, [r5, #0]
 8000ea6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000eaa:	d042      	beq.n	8000f32 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eac:	f7ff fd34 	bl	8000918 <HAL_GetTick>
 8000eb0:	1b00      	subs	r0, r0, r4
 8000eb2:	2802      	cmp	r0, #2
 8000eb4:	d9f6      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	e06a      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eba:	4a3c      	ldr	r2, [pc, #240]	; (8000fac <HAL_RCC_OscConfig+0x3f4>)
 8000ebc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec4:	e7db      	b.n	8000e7e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <HAL_RCC_OscConfig+0x3f8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fd24 	bl	8000918 <HAL_GetTick>
 8000ed0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed2:	4e36      	ldr	r6, [pc, #216]	; (8000fac <HAL_RCC_OscConfig+0x3f4>)
 8000ed4:	6833      	ldr	r3, [r6, #0]
 8000ed6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000eda:	d006      	beq.n	8000eea <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000edc:	f7ff fd1c 	bl	8000918 <HAL_GetTick>
 8000ee0:	1b40      	subs	r0, r0, r5
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d9f6      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x31c>
            return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	e052      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eea:	69e3      	ldr	r3, [r4, #28]
 8000eec:	6a22      	ldr	r2, [r4, #32]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ef2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ef8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000efc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000efe:	0852      	lsrs	r2, r2, #1
 8000f00:	3a01      	subs	r2, #1
 8000f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f06:	4a29      	ldr	r2, [pc, #164]	; (8000fac <HAL_RCC_OscConfig+0x3f4>)
 8000f08:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_RCC_OscConfig+0x3f8>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f10:	f7ff fd02 	bl	8000918 <HAL_GetTick>
 8000f14:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f16:	4d25      	ldr	r5, [pc, #148]	; (8000fac <HAL_RCC_OscConfig+0x3f4>)
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f1e:	d106      	bne.n	8000f2e <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f20:	f7ff fcfa 	bl	8000918 <HAL_GetTick>
 8000f24:	1b00      	subs	r0, r0, r4
 8000f26:	2802      	cmp	r0, #2
 8000f28:	d9f6      	bls.n	8000f18 <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e030      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000f2e:	2000      	movs	r0, #0
 8000f30:	e02e      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
 8000f32:	2000      	movs	r0, #0
 8000f34:	e02c      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d02d      	beq.n	8000f96 <HAL_RCC_OscConfig+0x3de>
        pll_config = RCC->PLLCFGR;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_RCC_OscConfig+0x3f4>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f42:	69e2      	ldr	r2, [r4, #28]
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d128      	bne.n	8000f9a <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4c:	6a21      	ldr	r1, [r4, #32]
 8000f4e:	428a      	cmp	r2, r1
 8000f50:	d125      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f52:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f54:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000f58:	401a      	ands	r2, r3
 8000f5a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000f5e:	d120      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3ea>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f60:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000f64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f66:	0852      	lsrs	r2, r2, #1
 8000f68:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f6a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000f6e:	d11a      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x3ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f72:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f76:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8000f7a:	bf14      	ite	ne
 8000f7c:	2001      	movne	r0, #1
 8000f7e:	2000      	moveq	r0, #0
 8000f80:	e006      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8000f82:	2001      	movs	r0, #1
}
 8000f84:	4770      	bx	lr
        return HAL_ERROR;
 8000f86:	2001      	movs	r0, #1
 8000f88:	e002      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
        return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8000f8e:	2000      	movs	r0, #0
}
 8000f90:	b002      	add	sp, #8
 8000f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8000f96:	2001      	movs	r0, #1
 8000f98:	e7fa      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	e7f8      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	e7f6      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	e7f4      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e7f2      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	42470060 	.word	0x42470060

08000fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <HAL_RCC_GetSysClockFreq+0x94>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d03d      	beq.n	800103e <HAL_RCC_GetSysClockFreq+0x8a>
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d13d      	bne.n	8001042 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_RCC_GetSysClockFreq+0x94>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000fd4:	d012      	beq.n	8000ffc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_RCC_GetSysClockFreq+0x94>)
 8000fd8:	6859      	ldr	r1, [r3, #4]
 8000fda:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fde:	2300      	movs	r3, #0
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <HAL_RCC_GetSysClockFreq+0x98>)
 8000fe2:	fba1 0100 	umull	r0, r1, r1, r0
 8000fe6:	f7ff f8f7 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_RCC_GetSysClockFreq+0x94>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000ff6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000ffa:	e023      	b.n	8001044 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001004:	015c      	lsls	r4, r3, #5
 8001006:	2500      	movs	r5, #0
 8001008:	1ae4      	subs	r4, r4, r3
 800100a:	f165 0500 	sbc.w	r5, r5, #0
 800100e:	01ae      	lsls	r6, r5, #6
 8001010:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001014:	01a7      	lsls	r7, r4, #6
 8001016:	1b38      	subs	r0, r7, r4
 8001018:	eb66 0105 	sbc.w	r1, r6, r5
 800101c:	00cc      	lsls	r4, r1, #3
 800101e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001022:	00c5      	lsls	r5, r0, #3
 8001024:	18e8      	adds	r0, r5, r3
 8001026:	f144 0100 	adc.w	r1, r4, #0
 800102a:	028b      	lsls	r3, r1, #10
 800102c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001030:	0284      	lsls	r4, r0, #10
 8001032:	4620      	mov	r0, r4
 8001034:	4619      	mov	r1, r3
 8001036:	2300      	movs	r3, #0
 8001038:	f7ff f8ce 	bl	80001d8 <__aeabi_uldivmod>
 800103c:	e7d5      	b.n	8000fea <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <HAL_RCC_GetSysClockFreq+0x98>)
 8001040:	e000      	b.n	8001044 <HAL_RCC_GetSysClockFreq+0x90>
      sysclockfreq = HSI_VALUE;
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	017d7840 	.word	0x017d7840
 8001050:	00f42400 	.word	0x00f42400

08001054 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001054:	2800      	cmp	r0, #0
 8001056:	f000 809d 	beq.w	8001194 <HAL_RCC_ClockConfig+0x140>
{
 800105a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105e:	460d      	mov	r5, r1
 8001060:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001062:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <HAL_RCC_ClockConfig+0x150>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	428b      	cmp	r3, r1
 800106c:	d208      	bcs.n	8001080 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106e:	b2cb      	uxtb	r3, r1
 8001070:	4a4c      	ldr	r2, [pc, #304]	; (80011a4 <HAL_RCC_ClockConfig+0x150>)
 8001072:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	428b      	cmp	r3, r1
 800107c:	f040 808c 	bne.w	8001198 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	f013 0f02 	tst.w	r3, #2
 8001086:	d017      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	f013 0f04 	tst.w	r3, #4
 800108c:	d004      	beq.n	8001098 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800108e:	4a46      	ldr	r2, [pc, #280]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 8001090:	6893      	ldr	r3, [r2, #8]
 8001092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001096:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	f013 0f08 	tst.w	r3, #8
 800109e:	d004      	beq.n	80010aa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a0:	4a41      	ldr	r2, [pc, #260]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 80010a2:	6893      	ldr	r3, [r2, #8]
 80010a4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010a8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010aa:	4a3f      	ldr	r2, [pc, #252]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 80010ac:	6893      	ldr	r3, [r2, #8]
 80010ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010b2:	68a1      	ldr	r1, [r4, #8]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	f013 0f01 	tst.w	r3, #1
 80010be:	d032      	beq.n	8001126 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c0:	6862      	ldr	r2, [r4, #4]
 80010c2:	2a01      	cmp	r2, #1
 80010c4:	d021      	beq.n	800110a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c6:	1e93      	subs	r3, r2, #2
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d925      	bls.n	8001118 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f013 0f02 	tst.w	r3, #2
 80010d4:	d062      	beq.n	800119c <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d6:	4934      	ldr	r1, [pc, #208]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 80010d8:	688b      	ldr	r3, [r1, #8]
 80010da:	f023 0303 	bic.w	r3, r3, #3
 80010de:	4313      	orrs	r3, r2
 80010e0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80010e2:	f7ff fc19 	bl	8000918 <HAL_GetTick>
 80010e6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e8:	4f2f      	ldr	r7, [pc, #188]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ea:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	6862      	ldr	r2, [r4, #4]
 80010f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010fa:	d014      	beq.n	8001126 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff fc0c 	bl	8000918 <HAL_GetTick>
 8001100:	1b80      	subs	r0, r0, r6
 8001102:	4540      	cmp	r0, r8
 8001104:	d9f3      	bls.n	80010ee <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8001106:	2003      	movs	r0, #3
 8001108:	e042      	b.n	8001190 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001112:	d1e0      	bne.n	80010d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e03b      	b.n	8001190 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001120:	d1d9      	bne.n	80010d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001122:	2001      	movs	r0, #1
 8001124:	e034      	b.n	8001190 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_RCC_ClockConfig+0x150>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	42ab      	cmp	r3, r5
 8001130:	d907      	bls.n	8001142 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	b2ea      	uxtb	r2, r5
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_RCC_ClockConfig+0x150>)
 8001136:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	42ab      	cmp	r3, r5
 8001140:	d12e      	bne.n	80011a0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	f013 0f04 	tst.w	r3, #4
 8001148:	d006      	beq.n	8001158 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 800114c:	6893      	ldr	r3, [r2, #8]
 800114e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001152:	68e1      	ldr	r1, [r4, #12]
 8001154:	430b      	orrs	r3, r1
 8001156:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	f013 0f08 	tst.w	r3, #8
 800115e:	d007      	beq.n	8001170 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 8001162:	6893      	ldr	r3, [r2, #8]
 8001164:	6921      	ldr	r1, [r4, #16]
 8001166:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800116a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800116e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001170:	f7ff ff20 	bl	8000fb4 <HAL_RCC_GetSysClockFreq>
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_ClockConfig+0x154>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <HAL_RCC_ClockConfig+0x158>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	40d8      	lsrs	r0, r3
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_ClockConfig+0x15c>)
 8001184:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_ClockConfig+0x160>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	f7ff fb79 	bl	8000880 <HAL_InitTick>
  return HAL_OK;
 800118e:	2000      	movs	r0, #0
}
 8001190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001194:	2001      	movs	r0, #1
}
 8001196:	4770      	bx	lr
      return HAL_ERROR;
 8001198:	2001      	movs	r0, #1
 800119a:	e7f9      	b.n	8001190 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 800119c:	2001      	movs	r0, #1
 800119e:	e7f7      	b.n	8001190 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80011a0:	2001      	movs	r0, #1
 80011a2:	e7f5      	b.n	8001190 <HAL_RCC_ClockConfig+0x13c>
 80011a4:	40023c00 	.word	0x40023c00
 80011a8:	40023800 	.word	0x40023800
 80011ac:	080017ec 	.word	0x080017ec
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000010 	.word	0x20000010

080011b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	4681      	mov	r9, r0
 80011c0:	460f      	mov	r7, r1
 80011c2:	4616      	mov	r6, r2
 80011c4:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80011c6:	f7ff fba7 	bl	8000918 <HAL_GetTick>
 80011ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011cc:	442b      	add	r3, r5
 80011ce:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 80011d2:	f7ff fba1 	bl	8000918 <HAL_GetTick>
 80011d6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80011d8:	4b2c      	ldr	r3, [pc, #176]	; (800128c <SPI_WaitFlagStateUntilTimeout+0xd4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80011e0:	fb08 f303 	mul.w	r3, r8, r3
 80011e4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80011e6:	f8d9 3000 	ldr.w	r3, [r9]
 80011ea:	689c      	ldr	r4, [r3, #8]
 80011ec:	ea37 0204 	bics.w	r2, r7, r4
 80011f0:	bf0c      	ite	eq
 80011f2:	2401      	moveq	r4, #1
 80011f4:	2400      	movne	r4, #0
 80011f6:	42b4      	cmp	r4, r6
 80011f8:	d044      	beq.n	8001284 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80011fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80011fe:	d0f4      	beq.n	80011ea <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001200:	f7ff fb8a 	bl	8000918 <HAL_GetTick>
 8001204:	eba0 000a 	sub.w	r0, r0, sl
 8001208:	4540      	cmp	r0, r8
 800120a:	d207      	bcs.n	800121c <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800120c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf08      	it	eq
 8001212:	4698      	moveq	r8, r3
      }
      count--;
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	e7e4      	b.n	80011e6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800121c:	f8d9 2000 	ldr.w	r2, [r9]
 8001220:	6853      	ldr	r3, [r2, #4]
 8001222:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001226:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001228:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800122c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001230:	d00c      	beq.n	800124c <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001232:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8001236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800123a:	d016      	beq.n	800126a <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 800123c:	2301      	movs	r3, #1
 800123e:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001242:	2300      	movs	r3, #0
 8001244:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8001248:	2003      	movs	r0, #3
 800124a:	e01c      	b.n	8001286 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800124c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001254:	d002      	beq.n	800125c <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125a:	d1ea      	bne.n	8001232 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800125c:	f8d9 2000 	ldr.w	r2, [r9]
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e7e3      	b.n	8001232 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800126a:	f8d9 2000 	ldr.w	r2, [r9]
 800126e:	6813      	ldr	r3, [r2, #0]
 8001270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	f8d9 2000 	ldr.w	r2, [r9]
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e7db      	b.n	800123c <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8001284:	2000      	movs	r0, #0
}
 8001286:	b002      	add	sp, #8
 8001288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128c:	20000008 	.word	0x20000008

08001290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001290:	b530      	push	{r4, r5, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <SPI_EndRxTxTransaction+0x60>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <SPI_EndRxTxTransaction+0x64>)
 800129c:	fba3 3000 	umull	r3, r0, r3, r0
 80012a0:	0d40      	lsrs	r0, r0, #21
 80012a2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80012a6:	fb05 f000 	mul.w	r0, r5, r0
 80012aa:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012b2:	d00b      	beq.n	80012cc <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80012b4:	9b03      	ldr	r3, [sp, #12]
 80012b6:	b1bb      	cbz	r3, 80012e8 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80012b8:	9b03      	ldr	r3, [sp, #12]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012c6:	d1f5      	bne.n	80012b4 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 80012c8:	2000      	movs	r0, #0
 80012ca:	e00e      	b.n	80012ea <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80012cc:	9200      	str	r2, [sp, #0]
 80012ce:	460b      	mov	r3, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff ff6f 	bl	80011b8 <SPI_WaitFlagStateUntilTimeout>
 80012da:	b130      	cbz	r0, 80012ea <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80012dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012de:	f043 0320 	orr.w	r3, r3, #32
 80012e2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80012e4:	2003      	movs	r0, #3
 80012e6:	e000      	b.n	80012ea <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80012e8:	2000      	movs	r0, #0
}
 80012ea:	b005      	add	sp, #20
 80012ec:	bd30      	pop	{r4, r5, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008
 80012f4:	165e9f81 	.word	0x165e9f81

080012f8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d05a      	beq.n	80013b2 <HAL_SPI_Init+0xba>
{
 80012fc:	b510      	push	{r4, lr}
 80012fe:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001300:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001302:	b933      	cbnz	r3, 8001312 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001304:	6843      	ldr	r3, [r0, #4]
 8001306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800130a:	d005      	beq.n	8001318 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800130c:	2300      	movs	r3, #0
 800130e:	61c3      	str	r3, [r0, #28]
 8001310:	e002      	b.n	8001318 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001316:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800131c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001320:	2b00      	cmp	r3, #0
 8001322:	d040      	beq.n	80013a6 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001324:	2302      	movs	r3, #2
 8001326:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800132a:	6822      	ldr	r2, [r4, #0]
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001332:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	6863      	ldr	r3, [r4, #4]
 8001338:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8001342:	430b      	orrs	r3, r1
 8001344:	68e1      	ldr	r1, [r4, #12]
 8001346:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800134a:	430b      	orrs	r3, r1
 800134c:	6921      	ldr	r1, [r4, #16]
 800134e:	f001 0102 	and.w	r1, r1, #2
 8001352:	430b      	orrs	r3, r1
 8001354:	6961      	ldr	r1, [r4, #20]
 8001356:	f001 0101 	and.w	r1, r1, #1
 800135a:	430b      	orrs	r3, r1
 800135c:	69a1      	ldr	r1, [r4, #24]
 800135e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8001362:	430b      	orrs	r3, r1
 8001364:	69e1      	ldr	r1, [r4, #28]
 8001366:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800136a:	430b      	orrs	r3, r1
 800136c:	6a21      	ldr	r1, [r4, #32]
 800136e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001372:	430b      	orrs	r3, r1
 8001374:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001376:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800137a:	430b      	orrs	r3, r1
 800137c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800137e:	6821      	ldr	r1, [r4, #0]
 8001380:	8b63      	ldrh	r3, [r4, #26]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001388:	f002 0210 	and.w	r2, r2, #16
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001390:	6822      	ldr	r2, [r4, #0]
 8001392:	69d3      	ldr	r3, [r2, #28]
 8001394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001398:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800139a:	2000      	movs	r0, #0
 800139c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800139e:	2301      	movs	r3, #1
 80013a0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80013a4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80013a6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff f9f0 	bl	8000790 <HAL_SPI_MspInit>
 80013b0:	e7b8      	b.n	8001324 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80013b2:	2001      	movs	r0, #1
}
 80013b4:	4770      	bx	lr

080013b6 <HAL_SPI_Transmit>:
{
 80013b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80013be:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	f000 80c2 	beq.w	800154c <HAL_SPI_Transmit+0x196>
 80013c8:	4604      	mov	r4, r0
 80013ca:	4688      	mov	r8, r1
 80013cc:	4617      	mov	r7, r2
 80013ce:	2301      	movs	r3, #1
 80013d0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80013d4:	f7ff faa0 	bl	8000918 <HAL_GetTick>
 80013d8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80013da:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80013de:	b2c0      	uxtb	r0, r0
 80013e0:	2801      	cmp	r0, #1
 80013e2:	f040 80a5 	bne.w	8001530 <HAL_SPI_Transmit+0x17a>
  if ((pData == NULL) || (Size == 0U))
 80013e6:	f1b8 0f00 	cmp.w	r8, #0
 80013ea:	f000 80a2 	beq.w	8001532 <HAL_SPI_Transmit+0x17c>
 80013ee:	2f00      	cmp	r7, #0
 80013f0:	f000 809f 	beq.w	8001532 <HAL_SPI_Transmit+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80013fe:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001402:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001404:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001406:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001408:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800140a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800140c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800140e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001410:	68a3      	ldr	r3, [r4, #8]
 8001412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001416:	d035      	beq.n	8001484 <HAL_SPI_Transmit+0xce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001420:	d103      	bne.n	800142a <HAL_SPI_Transmit+0x74>
    __HAL_SPI_ENABLE(hspi);
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001428:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800142a:	68e3      	ldr	r3, [r4, #12]
 800142c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001430:	d033      	beq.n	800149a <HAL_SPI_Transmit+0xe4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	b10b      	cbz	r3, 800143a <HAL_SPI_Transmit+0x84>
 8001436:	2f01      	cmp	r7, #1
 8001438:	d10a      	bne.n	8001450 <HAL_SPI_Transmit+0x9a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001442:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001444:	3301      	adds	r3, #1
 8001446:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001448:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800144a:	3b01      	subs	r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001450:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001452:	b29b      	uxth	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d15b      	bne.n	8001510 <HAL_SPI_Transmit+0x15a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001458:	4632      	mov	r2, r6
 800145a:	4629      	mov	r1, r5
 800145c:	4620      	mov	r0, r4
 800145e:	f7ff ff17 	bl	8001290 <SPI_EndRxTxTransaction>
 8001462:	b108      	cbz	r0, 8001468 <HAL_SPI_Transmit+0xb2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001464:	2320      	movs	r3, #32
 8001466:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001468:	68a3      	ldr	r3, [r4, #8]
 800146a:	b933      	cbnz	r3, 800147a <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800147a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800147c:	3800      	subs	r0, #0
 800147e:	bf18      	it	ne
 8001480:	2001      	movne	r0, #1
error:
 8001482:	e056      	b.n	8001532 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800148c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e7be      	b.n	8001418 <HAL_SPI_Transmit+0x62>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800149a:	6863      	ldr	r3, [r4, #4]
 800149c:	b10b      	cbz	r3, 80014a2 <HAL_SPI_Transmit+0xec>
 800149e:	2f01      	cmp	r7, #1
 80014a0:	d10a      	bne.n	80014b8 <HAL_SPI_Transmit+0x102>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014a6:	8812      	ldrh	r2, [r2, #0]
 80014a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80014aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014ac:	3302      	adds	r3, #2
 80014ae:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80014b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80014b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	b963      	cbnz	r3, 80014d8 <HAL_SPI_Transmit+0x122>
 80014be:	e7cb      	b.n	8001458 <HAL_SPI_Transmit+0xa2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014c0:	f7ff fa2a 	bl	8000918 <HAL_GetTick>
 80014c4:	1b80      	subs	r0, r0, r6
 80014c6:	42a8      	cmp	r0, r5
 80014c8:	d302      	bcc.n	80014d0 <HAL_SPI_Transmit+0x11a>
 80014ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 80014ce:	d139      	bne.n	8001544 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 80014d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0bf      	beq.n	8001458 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	f012 0f02 	tst.w	r2, #2
 80014e0:	d0ee      	beq.n	80014c0 <HAL_SPI_Transmit+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014e4:	8812      	ldrh	r2, [r2, #0]
 80014e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80014e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014ea:	3302      	adds	r3, #2
 80014ec:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80014ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80014f6:	e7eb      	b.n	80014d0 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014f8:	f7ff fa0e 	bl	8000918 <HAL_GetTick>
 80014fc:	1b80      	subs	r0, r0, r6
 80014fe:	42a8      	cmp	r0, r5
 8001500:	d302      	bcc.n	8001508 <HAL_SPI_Transmit+0x152>
 8001502:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001506:	d11f      	bne.n	8001548 <HAL_SPI_Transmit+0x192>
    while (hspi->TxXferCount > 0U)
 8001508:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800150a:	b292      	uxth	r2, r2
 800150c:	2a00      	cmp	r2, #0
 800150e:	d0a3      	beq.n	8001458 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	f012 0f02 	tst.w	r2, #2
 8001518:	d0ee      	beq.n	80014f8 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800151a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001522:	3301      	adds	r3, #1
 8001524:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001526:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001528:	3a01      	subs	r2, #1
 800152a:	b292      	uxth	r2, r2
 800152c:	86e2      	strh	r2, [r4, #54]	; 0x36
 800152e:	e7eb      	b.n	8001508 <HAL_SPI_Transmit+0x152>
    errorcode = HAL_BUSY;
 8001530:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001532:	2301      	movs	r3, #1
 8001534:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001538:	2300      	movs	r3, #0
 800153a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800153e:	b002      	add	sp, #8
 8001540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 8001544:	2003      	movs	r0, #3
 8001546:	e7f4      	b.n	8001532 <HAL_SPI_Transmit+0x17c>
          errorcode = HAL_TIMEOUT;
 8001548:	2003      	movs	r0, #3
 800154a:	e7f2      	b.n	8001532 <HAL_SPI_Transmit+0x17c>
  __HAL_LOCK(hspi);
 800154c:	2002      	movs	r0, #2
 800154e:	e7f6      	b.n	800153e <HAL_SPI_Transmit+0x188>

08001550 <HAL_SPI_TransmitReceive>:
{
 8001550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001554:	b083      	sub	sp, #12
 8001556:	461f      	mov	r7, r3
 8001558:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800155a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800155e:	2b01      	cmp	r3, #1
 8001560:	f000 8109 	beq.w	8001776 <HAL_SPI_TransmitReceive+0x226>
 8001564:	4604      	mov	r4, r0
 8001566:	4688      	mov	r8, r1
 8001568:	4691      	mov	r9, r2
 800156a:	2301      	movs	r3, #1
 800156c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001570:	f7ff f9d2 	bl	8000918 <HAL_GetTick>
 8001574:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8001576:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800157a:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800157c:	2801      	cmp	r0, #1
 800157e:	d00b      	beq.n	8001598 <HAL_SPI_TransmitReceive+0x48>
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001586:	f040 80de 	bne.w	8001746 <HAL_SPI_TransmitReceive+0x1f6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800158a:	68a3      	ldr	r3, [r4, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f040 80e4 	bne.w	800175a <HAL_SPI_TransmitReceive+0x20a>
 8001592:	2804      	cmp	r0, #4
 8001594:	f040 80e3 	bne.w	800175e <HAL_SPI_TransmitReceive+0x20e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001598:	f1b8 0f00 	cmp.w	r8, #0
 800159c:	f000 80e1 	beq.w	8001762 <HAL_SPI_TransmitReceive+0x212>
 80015a0:	f1b9 0f00 	cmp.w	r9, #0
 80015a4:	f000 80df 	beq.w	8001766 <HAL_SPI_TransmitReceive+0x216>
 80015a8:	2f00      	cmp	r7, #0
 80015aa:	f000 80de 	beq.w	800176a <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80015ae:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80015b6:	bf1c      	itt	ne
 80015b8:	2305      	movne	r3, #5
 80015ba:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80015c2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80015c6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80015c8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80015ca:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80015ce:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80015d0:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80015d2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80015d4:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80015de:	d103      	bne.n	80015e8 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015e8:	68e3      	ldr	r3, [r4, #12]
 80015ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ee:	d012      	beq.n	8001616 <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015f0:	6863      	ldr	r3, [r4, #4]
 80015f2:	b10b      	cbz	r3, 80015f8 <HAL_SPI_TransmitReceive+0xa8>
 80015f4:	2f01      	cmp	r7, #1
 80015f6:	d10a      	bne.n	800160e <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001600:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001602:	3301      	adds	r3, #1
 8001604:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001606:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001608:	3b01      	subs	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800160e:	2701      	movs	r7, #1
        txallowed = 0U;
 8001610:	f04f 0800 	mov.w	r8, #0
 8001614:	e066      	b.n	80016e4 <HAL_SPI_TransmitReceive+0x194>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001616:	6863      	ldr	r3, [r4, #4]
 8001618:	b10b      	cbz	r3, 800161e <HAL_SPI_TransmitReceive+0xce>
 800161a:	2f01      	cmp	r7, #1
 800161c:	d10a      	bne.n	8001634 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001622:	8812      	ldrh	r2, [r2, #0]
 8001624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001626:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001628:	3302      	adds	r3, #2
 800162a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800162c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800162e:	3b01      	subs	r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001634:	2701      	movs	r7, #1
        txallowed = 0U;
 8001636:	f04f 0800 	mov.w	r8, #0
 800163a:	e01a      	b.n	8001672 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800163c:	6822      	ldr	r2, [r4, #0]
 800163e:	6893      	ldr	r3, [r2, #8]
 8001640:	f013 0301 	ands.w	r3, r3, #1
 8001644:	d00d      	beq.n	8001662 <HAL_SPI_TransmitReceive+0x112>
 8001646:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001648:	b289      	uxth	r1, r1
 800164a:	b151      	cbz	r1, 8001662 <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800164c:	68d1      	ldr	r1, [r2, #12]
 800164e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001650:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001652:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001654:	3202      	adds	r2, #2
 8001656:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001658:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800165a:	3a01      	subs	r2, #1
 800165c:	b292      	uxth	r2, r2
 800165e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001660:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001662:	f7ff f959 	bl	8000918 <HAL_GetTick>
 8001666:	1b40      	subs	r0, r0, r5
 8001668:	42b0      	cmp	r0, r6
 800166a:	d302      	bcc.n	8001672 <HAL_SPI_TransmitReceive+0x122>
 800166c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001670:	d17d      	bne.n	800176e <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001672:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001674:	b29b      	uxth	r3, r3
 8001676:	b91b      	cbnz	r3, 8001680 <HAL_SPI_TransmitReceive+0x130>
 8001678:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800167a:	b29b      	uxth	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d04e      	beq.n	800171e <HAL_SPI_TransmitReceive+0x1ce>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	f012 0f02 	tst.w	r2, #2
 8001688:	d0d8      	beq.n	800163c <HAL_SPI_TransmitReceive+0xec>
 800168a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800168c:	b292      	uxth	r2, r2
 800168e:	2a00      	cmp	r2, #0
 8001690:	d0d4      	beq.n	800163c <HAL_SPI_TransmitReceive+0xec>
 8001692:	2f00      	cmp	r7, #0
 8001694:	d0d2      	beq.n	800163c <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001696:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001698:	8812      	ldrh	r2, [r2, #0]
 800169a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800169c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800169e:	3302      	adds	r3, #2
 80016a0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80016a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80016aa:	4647      	mov	r7, r8
 80016ac:	e7c6      	b.n	800163c <HAL_SPI_TransmitReceive+0xec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	6893      	ldr	r3, [r2, #8]
 80016b2:	f013 0301 	ands.w	r3, r3, #1
 80016b6:	d00d      	beq.n	80016d4 <HAL_SPI_TransmitReceive+0x184>
 80016b8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80016ba:	b289      	uxth	r1, r1
 80016bc:	b151      	cbz	r1, 80016d4 <HAL_SPI_TransmitReceive+0x184>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80016be:	68d1      	ldr	r1, [r2, #12]
 80016c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80016c2:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 80016c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80016c6:	3201      	adds	r2, #1
 80016c8:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80016ca:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80016cc:	3a01      	subs	r2, #1
 80016ce:	b292      	uxth	r2, r2
 80016d0:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 80016d2:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80016d4:	f7ff f920 	bl	8000918 <HAL_GetTick>
 80016d8:	1b43      	subs	r3, r0, r5
 80016da:	42b3      	cmp	r3, r6
 80016dc:	d302      	bcc.n	80016e4 <HAL_SPI_TransmitReceive+0x194>
 80016de:	f1b6 3fff 	cmp.w	r6, #4294967295
 80016e2:	d146      	bne.n	8001772 <HAL_SPI_TransmitReceive+0x222>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b913      	cbnz	r3, 80016f0 <HAL_SPI_TransmitReceive+0x1a0>
 80016ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	b1b3      	cbz	r3, 800171e <HAL_SPI_TransmitReceive+0x1ce>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	f012 0f02 	tst.w	r2, #2
 80016f8:	d0d9      	beq.n	80016ae <HAL_SPI_TransmitReceive+0x15e>
 80016fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80016fc:	b292      	uxth	r2, r2
 80016fe:	2a00      	cmp	r2, #0
 8001700:	d0d5      	beq.n	80016ae <HAL_SPI_TransmitReceive+0x15e>
 8001702:	2f01      	cmp	r7, #1
 8001704:	d1d3      	bne.n	80016ae <HAL_SPI_TransmitReceive+0x15e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001706:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800170c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800170e:	3301      	adds	r3, #1
 8001710:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001712:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800171a:	4647      	mov	r7, r8
 800171c:	e7c7      	b.n	80016ae <HAL_SPI_TransmitReceive+0x15e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800171e:	462a      	mov	r2, r5
 8001720:	4631      	mov	r1, r6
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fdb4 	bl	8001290 <SPI_EndRxTxTransaction>
 8001728:	b948      	cbnz	r0, 800173e <HAL_SPI_TransmitReceive+0x1ee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800172a:	68a3      	ldr	r3, [r4, #8]
 800172c:	b963      	cbnz	r3, 8001748 <HAL_SPI_TransmitReceive+0x1f8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	9201      	str	r2, [sp, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	9b01      	ldr	r3, [sp, #4]
 800173c:	e004      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800173e:	2320      	movs	r3, #32
 8001740:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001742:	2001      	movs	r0, #1
    goto error;
 8001744:	e000      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
    errorcode = HAL_BUSY;
 8001746:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001748:	2301      	movs	r3, #1
 800174a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800174e:	2300      	movs	r3, #0
 8001750:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001754:	b003      	add	sp, #12
 8001756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800175a:	2002      	movs	r0, #2
 800175c:	e7f4      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
 800175e:	2002      	movs	r0, #2
 8001760:	e7f2      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
    errorcode = HAL_ERROR;
 8001762:	2001      	movs	r0, #1
 8001764:	e7f0      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
 8001766:	2001      	movs	r0, #1
 8001768:	e7ee      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
 800176a:	2001      	movs	r0, #1
 800176c:	e7ec      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
        errorcode = HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	e7ea      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
        errorcode = HAL_TIMEOUT;
 8001772:	2003      	movs	r0, #3
 8001774:	e7e8      	b.n	8001748 <HAL_SPI_TransmitReceive+0x1f8>
  __HAL_LOCK(hspi);
 8001776:	2002      	movs	r0, #2
 8001778:	e7ec      	b.n	8001754 <HAL_SPI_TransmitReceive+0x204>
	...

0800177c <__libc_init_array>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	4d0d      	ldr	r5, [pc, #52]	; (80017b4 <__libc_init_array+0x38>)
 8001780:	4c0d      	ldr	r4, [pc, #52]	; (80017b8 <__libc_init_array+0x3c>)
 8001782:	1b64      	subs	r4, r4, r5
 8001784:	10a4      	asrs	r4, r4, #2
 8001786:	2600      	movs	r6, #0
 8001788:	42a6      	cmp	r6, r4
 800178a:	d109      	bne.n	80017a0 <__libc_init_array+0x24>
 800178c:	4d0b      	ldr	r5, [pc, #44]	; (80017bc <__libc_init_array+0x40>)
 800178e:	4c0c      	ldr	r4, [pc, #48]	; (80017c0 <__libc_init_array+0x44>)
 8001790:	f000 f820 	bl	80017d4 <_init>
 8001794:	1b64      	subs	r4, r4, r5
 8001796:	10a4      	asrs	r4, r4, #2
 8001798:	2600      	movs	r6, #0
 800179a:	42a6      	cmp	r6, r4
 800179c:	d105      	bne.n	80017aa <__libc_init_array+0x2e>
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a4:	4798      	blx	r3
 80017a6:	3601      	adds	r6, #1
 80017a8:	e7ee      	b.n	8001788 <__libc_init_array+0xc>
 80017aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ae:	4798      	blx	r3
 80017b0:	3601      	adds	r6, #1
 80017b2:	e7f2      	b.n	800179a <__libc_init_array+0x1e>
 80017b4:	08001804 	.word	0x08001804
 80017b8:	08001804 	.word	0x08001804
 80017bc:	08001804 	.word	0x08001804
 80017c0:	08001808 	.word	0x08001808

080017c4 <memset>:
 80017c4:	4402      	add	r2, r0
 80017c6:	4603      	mov	r3, r0
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d100      	bne.n	80017ce <memset+0xa>
 80017cc:	4770      	bx	lr
 80017ce:	f803 1b01 	strb.w	r1, [r3], #1
 80017d2:	e7f9      	b.n	80017c8 <memset+0x4>

080017d4 <_init>:
 80017d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d6:	bf00      	nop
 80017d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017da:	bc08      	pop	{r3}
 80017dc:	469e      	mov	lr, r3
 80017de:	4770      	bx	lr

080017e0 <_fini>:
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	bf00      	nop
 80017e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e6:	bc08      	pop	{r3}
 80017e8:	469e      	mov	lr, r3
 80017ea:	4770      	bx	lr
